{"version":3,"sources":["../src/parcel.js"],"names":["module","angular","directive","restrict","template","scope","mountParcel","parcelConfig","props","controller","$scope","$element","singleSpaProps","Error","parcel","getParcelProps","$on","unmount","$watch","update","result","domElement","k"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA,MAAMA,MAAM,GAAGC,oBAAQD,MAAR,CAAe,sBAAf,EAAuC,EAAvC,CAAf;;AACAA,EAAAA,MAAM,CAACE,SAAP,CAAiB,iBAAjB,EAAoC;AAAA,WAAO;AACzCC,MAAAA,QAAQ,EAAE,GAD+B;AAEzCC,MAAAA,QAAQ,EAAE,aAF+B;AAGzCC,MAAAA,KAAK,EAAE;AACLC,QAAAA,WAAW,EAAE,GADR;AAELC,QAAAA,YAAY,EAAE,GAFT;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAHkC;AAQzCC,MAAAA,UAAU,EAAE,CACV,QADU,EAEV,UAFU,EAGV,gBAHU,EAIV,UAACC,MAAD,EAASC,QAAT,EAAmBC,cAAnB,EAAsC;AACpC,YAAI,CAACF,MAAM,CAACH,YAAZ,EAA0B;AACxB,gBAAMM,KAAK,sGAAX;AAGD;;AAED,YAAMP,WAAW,GAAGI,MAAM,CAACJ,WAAP,IAAsBM,cAAc,CAACN,WAAzD;;AAEA,YAAI,CAACA,WAAL,EAAkB;AAChB,gBAAMO,KAAK,CACT,yFADS,CAAX;AAGD;;AAED,YAAMC,MAAM,GAAGR,WAAW,CAACI,MAAM,CAACH,YAAR,EAAsBQ,cAAc,EAApC,CAA1B;AAEAL,QAAAA,MAAM,CAACM,GAAP,CAAW,UAAX,EAAuBF,MAAM,CAACG,OAA9B;AAEAP,QAAAA,MAAM,CAACQ,MAAP,CAAc,OAAd,EAAuB,YAAM;AAC3B,cAAIJ,MAAM,CAACK,MAAX,EAAmB;AACjBL,YAAAA,MAAM,CAACK,MAAP,CAAcJ,cAAc,EAA5B;AACD;AACF,SAJD;;AAMA,iBAASA,cAAT,GAA0B;AACxB,cAAMK,MAAM,GAAG;AACbC,YAAAA,UAAU,EAAEV,QAAQ,CAAC,CAAD;AADP,WAAf;;AAIA,cAAID,MAAM,CAACF,KAAX,EAAkB;AAChB,iBAAK,IAAIc,CAAT,IAAcZ,MAAM,CAACF,KAArB,EAA4B;AAC1BY,cAAAA,MAAM,CAACE,CAAD,CAAN,GAAYZ,MAAM,CAACF,KAAP,CAAac,CAAb,CAAZ;AACD;AACF;;AAED,iBAAOF,MAAP;AACD;AACF,OA1CS;AAR6B,KAAP;AAAA,GAApC","sourcesContent":["import angular from \"angular\";\n\nconst module = angular.module(\"single-spa-angularjs\", []);\nmodule.directive(\"singleSpaParcel\", () => ({\n  restrict: \"E\",\n  template: \"<div></div>\",\n  scope: {\n    mountParcel: \"=\",\n    parcelConfig: \"=\",\n    props: \"=\",\n  },\n  controller: [\n    \"$scope\",\n    \"$element\",\n    \"singleSpaProps\",\n    ($scope, $element, singleSpaProps) => {\n      if (!$scope.parcelConfig) {\n        throw Error(\n          `single-spa-angularjs: The <single-spa-parcel> directive requires a parcelConfig object or function`\n        );\n      }\n\n      const mountParcel = $scope.mountParcel || singleSpaProps.mountParcel;\n\n      if (!mountParcel) {\n        throw Error(\n          \"single-spa-angularjs: The <single-spa-parcel> directive requires a mountParcel function\"\n        );\n      }\n\n      const parcel = mountParcel($scope.parcelConfig, getParcelProps());\n\n      $scope.$on(\"$destroy\", parcel.unmount);\n\n      $scope.$watch(\"props\", () => {\n        if (parcel.update) {\n          parcel.update(getParcelProps());\n        }\n      });\n\n      function getParcelProps() {\n        const result = {\n          domElement: $element[0],\n        };\n\n        if ($scope.props) {\n          for (let k in $scope.props) {\n            result[k] = $scope.props[k];\n          }\n        }\n\n        return result;\n      }\n    },\n  ],\n}));\n"],"file":"parcel.js"}